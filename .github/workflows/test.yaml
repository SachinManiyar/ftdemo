name: Test, Build, and Release APK

on:
  pull_request:
    branches:
      - main
      - master
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build:
    name: Build APK and Generate SBOM
    runs-on: ubuntu-latest
    outputs:
      apk-path: ${{ steps.build-apk.outputs.apk-path }}
      sbom-path: ${{ steps.upload-sbom.outputs.sbom-path }}
      hashes: ${{ steps.generate-slsa-provenance.outputs.hashes }}

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v1
        with:
          java-version: '17'  # Update to the JDK version required for your project

      - name: Clone Flutter repository with master channel
        uses: subosito/flutter-action@2783a3f08e1baf891508463f8c6653c258246225
        with:
          channel: master

      - name: Install Bundler
        run: gem install bundler

      - name: Install gems
        run: bundle install

      - name: Set up Firebase CLI
        run: |
          curl -sL https://firebase.tools | bash

      - name: Build APK
        id: build-apk
        run: |
          flutter build apk --debug
          echo "apk-path=build/app/outputs/apk/debug/app-debug.apk" >> $GITHUB_ENV

      - name: Set up CycloneDX Gradle Plugin
        run: |
          echo 'plugins { id "com.hikvision.gradle.cyclonedx" version "1.0.2" }' >> build.gradle
          echo 'cyclonedxBom { format = "json" outputFile = file("build/reports/cyclonedx/bom.json") }' >> build.gradle

      - name: Generate SBOM
        id: generate-sbom
        run: |
          ./gradlew cyclonedxBom
          echo "sbom-path=build/reports/cyclonedx/bom.json" >> $GITHUB_ENV

      - name: Upload SBOM as artifact
        id: upload-sbom
        uses: actions/upload-artifact@v2
        with:
          name: sbom
          path: ${{ env.sbom-path }}

      - name: Generate SLSA Provenance
        id: generate-slsa-provenance
        run: |
          set -euo pipefail
          
          # Generate base64 encoded SHA256 hashes for the APK
          apk_files=$(find build/app/outputs/apk/debug -type f -name "*.apk")
          hashes=$(sha256sum $apk_files | base64 -w0)
          echo "hashes=${hashes}" >> $GITHUB_ENV

  provenance:
    name: Generate SLSA Provenance
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read   # To read the workflow path
      id-token: write # To sign the provenance
      contents: write # To add assets to a release
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v1.4.0
    with:
      base64-subjects: "${{ needs.build.outputs.hashes }}"
      distribution: "apk"  # Specify the distribution type
      upload-assets: true  # Optional: Upload to a new release
